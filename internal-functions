#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$_DIR/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"

fn-nginx-path-disable-custom-config() {
  declare desc="get the configured disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" "disable-custom-config"
}

fn-nginx-path-computed-disable-custom-config() {
  declare desc="get the computed disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" --computed "disable-custom-config"
}

fn-nginx-path-global-disable-custom-config() {
  declare desc="get the global disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" --global "disable-custom-config"
}

fn-nginx-path-vhosts-last-visited-at() {
  declare APP="$1"
  local LOG_PATH=$(fn-nginx-path-access-log-path "$APP")

  if [[ "$LOG_PATH" != "off" ]] && [[ "$LOG_PATH" != "/dev/null" ]] && [[ -f "$LOG_PATH" ]]; then
    stat -c %Y "$LOG_PATH"
  fi
}

fn-nginx-path-log-root() {
  declare desc="get the nginx log root"
  local NGINX_LOG_ROOT="/var/log/nginx"

  fn-nginx-path-vhosts-uses-openresty && NGINX_LOG_ROOT="/var/log/openresty"
  echo "$NGINX_LOG_ROOT"
}

# [BEGIN Sigils]
fn-nginx-path-sigil() {
  declare desc="get nginx config sigil path for different block types"
  declare TYPE="$1" SCOPE="$2" APP="$3" DOMAIN="${4:-}"
  local orig_property_name="nginx-conf-${TYPE}-sigil-path"

  local property_name="${orig_property_name}-${APP}"
  [[ -n "$DOMAIN" ]] && property_name="${property_name}-${DOMAIN}"

  case "$SCOPE" in
    computed)
      result=$(fn-get-property --computed --app "$APP" "$property_name")
      if [[ -z "$result" ]]; then
        result=$(fn-get-property --computed --app "$APP" "$orig_property_name")
      fi
      ;;
  esac

  echo "$result"
}

# Location config
fn-nginx-path-computed-nginx-conf-location-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "location" "computed" "$APP" "$DOMAIN"
}

# Upstream config
fn-nginx-path-computed_nginx-conf-upstream-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "upstream" "computed" "$APP" "$DOMAIN"
}

# Server block config
fn-nginx-path-computed_nginx-conf-server-block-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "server-block" "computed" "$APP" "$DOMAIN"
}

# HTTP block config
fn-nginx-path-computed_nginx-conf-http-block-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "http-block" "computed" "$APP" "$DOMAIN"
}
# [END Sigils]

fn-nginx-path-vhosts-uses-openresty() {
  declare desc="returns whether openresty is in use or not"

  if [[ -x /usr/bin/openresty ]]; then
    return
  fi

  return 1
}

fn-nginx-path-vhosts-nginx-location() {
  declare desc="check that nginx is at the expected location and return it"
  local NGINX_LOCATION

  NGINX_LOCATION=$(command -v nginx 2>/dev/null)
  if [[ -z "$NGINX_LOCATION" ]]; then
    NGINX_LOCATION="/usr/sbin/nginx"
  fi

  if fn-nginx-path-vhosts-uses-openresty; then
    NGINX_LOCATION="/usr/bin/openresty"
  fi

  if [[ ! -x "$NGINX_LOCATION" ]]; then
    dokku_log_fail "Could not find nginx binary in \$PATH or at '${NGINX_LOCATION}'."
  fi

  echo "$NGINX_LOCATION"
}

fn-get-property() {
  declare desc="get a property from the nginx plugin"

  "$_DIR/nginx-property" --log-root "$(fn-nginx-path-log-root)"  "$@"
}

nginx_vhosts_validate_single_func() {
  declare APP="$1" FLAG="$2"
  local NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf"

  if [[ ! -f "$NGINX_CONF" ]]; then
    dokku_log_warn_quiet "No nginx config found for ${APP}"
    return
  fi

  if nginx_vhosts_is_valid_nginx_config_func "$APP" "in_server_block"; then
    return
  fi

  dokku_log_warn "Failed to validate nginx config for ${APP}. Contents below..."
  cat "$NGINX_CONF"

  if [[ "$FLAG" == "--clean" ]]; then
    nginx_vhosts_conf_clean_func "$APP"
  fi
}

nginx_vhosts_is_valid_nginx_config_func() {
  declare desc="checks if an app has a valid nginx config"
  declare APP="$1" CONFIG_TYPE="$2"
  if [[ -z "$CONFIG_TYPE" ]]; then
    echo "CONFIG_TYPE (second argument) is required"
    return 1
  fi

  local VALIDATE_TEMPLATE="$_DIR/templates/validate.conf.sigil"
  local TMP_OUTPUT=$(mktemp "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
  trap "rm -rf '$TMP_OUTPUT' >/dev/null" RETURN INT TERM EXIT

  CUSTOM_VALIDATE_TEMPLATE="$(plugn trigger nginx-path-app-template-source "$APP" "validate-config")"
  if [[ -n "$CUSTOM_VALIDATE_TEMPLATE" ]]; then
    VALIDATE_TEMPLATE="$CUSTOM_VALIDATE_TEMPLATE"
  fi

  sigil -f "$VALIDATE_TEMPLATE" NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf" | cat -s >"$TMP_OUTPUT"
  local NGINX_LOCATION=$(fn-nginx-path-vhosts-nginx-location)
  sudo "$NGINX_LOCATION" -t -c "$TMP_OUTPUT" 2>/dev/null
}

nginx_vhosts_conf_clean_func() {
  declare APP="$1"
  local NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf"
  dokku_log_warn "Removing invalid nginx file"
  rm -f "$NGINX_CONF"
}

nginx_clear_config() {
  declare desc="Remove the nginx conf file"
  declare APP="$1"
  rm -f "$DOKKU_ROOT/$APP/nginx.conf"
  suppress_output fn-nginx-path-vhosts-nginx-path-init-cmd "reload"
}

fn-nginx-path-computed-app-path() {
  declare desc="get the computed app-path value"
  declare APP="$1"

  local app_path=$(fn-get-property --app "$APP" --computed "app-path")
  if [[ -z "$app_path" ]]; then
    echo "$APP"
  else
    echo "$app_path"
  fi
}

fn-nginx-path-computed-root-domain() {
  declare desc="get the computed root domain value"
  declare APP="$1"

  local root_domain=$(fn-get-property --app "$APP" --computed "root-domain")
  if [[ -z "$root_domain" ]]; then
    echo "$APP"
  else
    echo "$root_domain"
  fi
}

fn-nginx-path-computed-default-app() {
  declare desc="get the computed default app value"
  declare APP="$1"

  if [[ -z "$APP" ]]; then
      dokku_log_fail "App name is required for fn-nginx-path-computed-default-app"
  fi

  local default_app=$(fn-get-property --app "$APP" --computed "default-app")
  if [[ -z "$default_app" ]]; then
    echo "$APP"
  else
    echo "$default_app"
  fi
}

fn-nginx-path-access-log-format() {
  declare APP="$1"
  fn-get-property --app "$APP" "access-log-format"
}

fn-nginx-path-computed-access-log-format() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "access-log-format"
}

fn-nginx-path-global-access-log-format() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "access-log-format"
}

fn-nginx-path-access-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" "access-log-path"
}

fn-nginx-path-computed-access-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "access-log-path"
}

fn-nginx-path-global-access-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "access-log-path"
}

fn-nginx-path-error-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" "error-log-path"
}

fn-nginx-path-computed-error-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "error-log-path"
}

fn-nginx-path-global-error-log-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "error-log-path"
}

fn-nginx-path-bind-address-ipv4() {
  declare APP="$1"
  fn-get-property --app "$APP" "bind-address-ipv4"
}

fn-nginx-path-computed-bind-address-ipv4() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "bind-address-ipv4"
}

fn-nginx-path-global-bind-address-ipv4() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "bind-address-ipv4"
}

fn-nginx-path-bind-address-ipv6() {
  declare APP="$1"
  fn-get-property --app "$APP" "bind-address-ipv6"
}

fn-nginx-path-computed-bind-address-ipv6() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "bind-address-ipv6"
}

fn-nginx-path-global-bind-address-ipv6() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "bind-address-ipv6"
}

fn-nginx-path-client-body-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "client-body-timeout"
}

fn-nginx-path-computed-client-body-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "client-body-timeout"
}

fn-nginx-path-global-client-body-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "client-body-timeout"
}

fn-nginx-path-client-header-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "client-header-timeout"
}

fn-nginx-path-computed-client-header-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "client-header-timeout"
}

fn-nginx-path-global-client-header-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "client-header-timeout"
}

fn-nginx-path-client-max-body-size() {
  declare APP="$1"
  fn-get-property --app "$APP" "client-max-body-size"
}

fn-nginx-path-computed-client-max-body-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "client-max-body-size"
}

fn-nginx-path-global-client-max-body-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "client-max-body-size"
}

fn-nginx-path-disable-custom-config() {
  declare APP="$1"
  fn-get-property --app "$APP" "disable-custom-config"
}

fn-nginx-path-computed-disable-custom-config() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "disable-custom-config"
}

fn-nginx-path-global-disable-custom-config() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "disable-custom-config"
}

fn-nginx-path-hsts-include-subdomains() {
  declare APP="$1"
  fn-get-property --app "$APP" "hsts-include-subdomains"
}

fn-nginx-path-computed-hsts-include-subdomains() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "hsts-include-subdomains"
}

fn-nginx-path-global-hsts-include-subdomains() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "hsts-include-subdomains"
}

fn-nginx-path-hsts-max-age() {
  declare APP="$1"
  fn-get-property --app "$APP" "hsts-max-age"
}

fn-nginx-path-computed-hsts-max-age() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "hsts-max-age"
}

fn-nginx-path-global-hsts-max-age() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "hsts-max-age"
}

fn-nginx-path-hsts-preload() {
  declare APP="$1"
  fn-get-property --app "$APP" "hsts-preload"
}

fn-nginx-path-computed-hsts-preload() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "hsts-preload"
}

fn-nginx-path-global-hsts-preload() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "hsts-preload"
}

fn-nginx-path-hsts() {
  declare APP="$1"
  fn-get-property --app "$APP" "hsts"
}

fn-nginx-path-computed-hsts() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "hsts"
}

fn-nginx-path-global-hsts() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "hsts"
}

fn-nginx-path-keepalive-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "keepalive-timeout"
}

fn-nginx-path-computed-keepalive-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "keepalive-timeout"
}

fn-nginx-path-global-keepalive-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "keepalive-timeout"
}

fn-nginx-path-lingering-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "lingering-timeout"
}

fn-nginx-path-computed-lingering-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "lingering-timeout"
}

fn-nginx-path-global-lingering-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "lingering-timeout"
}

fn-nginx-path-nginx-path-location-conf-sigil-path() {
  declare APP="$1"
  fn-get-property --app "$APP" "nginx-path-location-conf-sigil-path"
}

fn-nginx-path-computed-nginx-path-location-conf-sigil-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "nginx-path-location-conf-sigil-path"
}

fn-nginx-path-global-nginx-path-location-conf-sigil-path() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "nginx-path-location-conf-sigil-path"
}

fn-nginx-path-proxy-buffer-size() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-buffer-size"
}

fn-nginx-path-computed-proxy-buffer-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-buffer-size"
}

fn-nginx-path-global-proxy-buffer-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-buffer-size"
}

fn-nginx-path-proxy-buffering() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-buffering"
}

fn-nginx-path-computed-proxy-buffering() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-buffering"
}

fn-nginx-path-global-proxy-buffering() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-buffering"
}

fn-nginx-path-proxy-buffers() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-buffers"
}

fn-nginx-path-computed-proxy-buffers() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-buffers"
}

fn-nginx-path-global-proxy-buffers() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-buffers"
}

fn-nginx-path-proxy-busy-buffers-size() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-busy-buffers-size"
}

fn-nginx-path-computed-proxy-busy-buffers-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-busy-buffers-size"
}

fn-nginx-path-global-proxy-busy-buffers-size() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-busy-buffers-size"
}

fn-nginx-path-proxy-connect-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-connect-timeout"
}

fn-nginx-path-computed-proxy-connect-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-connect-timeout"
}

fn-nginx-path-global-proxy-connect-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-connect-timeout"
}

fn-nginx-path-proxy-read-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-read-timeout"
}

fn-nginx-path-computed-proxy-read-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-read-timeout"
}

fn-nginx-path-global-proxy-read-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-read-timeout"
}

fn-nginx-path-proxy-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "proxy-send-timeout"
}

fn-nginx-path-computed-proxy-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "proxy-send-timeout"
}

fn-nginx-path-global-proxy-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "proxy-send-timeout"
}

fn-nginx-path-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" "send-timeout"
}

fn-nginx-path-computed-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "send-timeout"
}

fn-nginx-path-global-send-timeout() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "send-timeout"
}

fn-nginx-path-underscore-in-headers() {
  declare APP="$1"
  fn-get-property --app "$APP" "underscore-in-headers"
}

fn-nginx-path-computed-underscore-in-headers() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "underscore-in-headers"
}

fn-nginx-path-global-underscore-in-headers() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "underscore-in-headers"
}

fn-nginx-path-x-forwarded-for-value() {
  declare APP="$1"
  fn-get-property --app "$APP" "x-forwarded-for-value"
}

fn-nginx-path-computed-x-forwarded-for-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "x-forwarded-for-value"
}

fn-nginx-path-global-x-forwarded-for-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "x-forwarded-for-value"
}

fn-nginx-path-x-forwarded-port-value() {
  declare APP="$1"
  fn-get-property --app "$APP" "x-forwarded-port-value"
}

fn-nginx-path-computed-x-forwarded-port-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "x-forwarded-port-value"
}

fn-nginx-path-global-x-forwarded-port-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "x-forwarded-port-value"
}

fn-nginx-path-x-forwarded-proto-value() {
  declare APP="$1"
  fn-get-property --app "$APP" "x-forwarded-proto-value"
}

fn-nginx-path-computed-x-forwarded-proto-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "x-forwarded-proto-value"
}

fn-nginx-path-global-x-forwarded-proto-value() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "x-forwarded-proto-value"
}

fn-nginx-path-x-forwarded-ssl() {
  declare APP="$1"
  fn-get-property --app "$APP" "x-forwarded-ssl"
}

fn-nginx-path-computed-x-forwarded-ssl() {
  declare APP="$1"
  fn-get-property --app "$APP" --computed "x-forwarded-ssl"
}

fn-nginx-path-global-x-forwarded-ssl() {
  declare APP="$1"
  fn-get-property --app "$APP" --global "x-forwarded-ssl"
}

fn-nginx-path-vhosts-nginx-path-init-cmd() {
  declare desc="executes nginx init cmd if available"
  declare CMD="$1"
  local NGINX_INIT_NAME="nginx"

  if fn-nginx-path-vhosts-uses-openresty; then
    NGINX_INIT_NAME="openresty"
  fi

  case "$DOKKU_DISTRO" in
    debian | ubuntu)
      if [[ -x /bin/systemctl ]] || [[ -x /usr/bin/systemctl ]]; then
        local systemctl_path="/bin/systemctl"
        [[ -x /usr/bin/systemctl ]] && systemctl_path="/usr/bin/systemctl"
        sudo "$systemctl_path" "$CMD" "$NGINX_INIT_NAME"
      else
        sudo "/etc/init.d/$NGINX_INIT_NAME" "$CMD"
      fi
      ;;
    arch)
      sudo systemctl "$CMD" "$NGINX_INIT_NAME"
      ;;
  esac
}

fn-nginx-path-vhosts-nginx-path-location() {
  declare desc="check that nginx is at the expected location and return it"
  fn-nginx-path-vhosts-nginx-location
}

fn-nginx-path-vhosts-nginx-path-is-running() {
  declare desc="check if nginx is running"
  local NGINX_INIT_NAME="nginx"

  if fn-nginx-path-vhosts-uses-openresty; then
    NGINX_INIT_NAME="openresty"
  fi

  case "$DOKKU_DISTRO" in
    debian | ubuntu)
      if [[ -x /bin/systemctl ]] || [[ -x /usr/bin/systemctl ]]; then
        local systemctl_path="/bin/systemctl"
        [[ -x /usr/bin/systemctl ]] && systemctl_path="/usr/bin/systemctl"
        sudo "$systemctl_path" is-active --quiet "$NGINX_INIT_NAME" 2>/dev/null
      else
        sudo service "$NGINX_INIT_NAME" status >/dev/null 2>&1
      fi
      ;;
    arch)
      sudo systemctl is-active --quiet "$NGINX_INIT_NAME" 2>/dev/null
      ;;
  esac
}

fn-nginx-path-vhosts-manage-hsts() {
  declare desc="manages hsts for nginx"
  declare APP="$1" SSL_INUSE="$2"
  local HSTS_COMPUTED_CONF="$(plugn trigger nginx-path-computed-hsts "$APP")"

  if [[ "$SSL_INUSE" == "true" ]] && [[ "$HSTS_COMPUTED_CONF" == "true" ]]; then
    local HSTS_MAX_AGE="$(fn-nginx-path-computed-hsts-max-age "$APP")"
    local HSTS_INCLUDE_SUBDOMAINS="$(fn-nginx-path-computed-hsts-include-subdomains "$APP")"
    local HSTS_PRELOAD="$(fn-nginx-path-computed-hsts-preload "$APP")"

    local HSTS_HEADERS="max-age=$HSTS_MAX_AGE"
    [[ "$HSTS_INCLUDE_SUBDOMAINS" == "true" ]] && HSTS_HEADERS="$HSTS_HEADERS; includeSubDomains"
    [[ "$HSTS_PRELOAD" == "true" ]] && HSTS_HEADERS="$HSTS_HEADERS; preload"

    local NGINX_TEMPLATE="$_DIR/templates/hsts.conf.sigil"
    local NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf.d/hsts.conf"

    mkdir -p "$DOKKU_ROOT/$APP/nginx.conf.d"
    sigil -f "$NGINX_TEMPLATE" HSTS_HEADERS="$HSTS_HEADERS" > "$NGINX_CONF"
  else
    rm -f "$DOKKU_ROOT/$APP/nginx.conf.d/hsts.conf"
  fi
}
