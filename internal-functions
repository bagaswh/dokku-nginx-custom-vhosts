#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$_DIR/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"


fn-nginx-path-disable-custom-config() {
  declare desc="get the configured disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" "disable-custom-config"
}

fn-nginx-path-computed-disable-custom-config() {
  declare desc="get the computed disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" --computed "disable-custom-config"
}

fn-nginx-path-global-disable-custom-config() {
  declare desc="get the global disable-custom-config value"
  declare APP="$1"

  fn-get-property --app "$APP" --global "disable-custom-config"
}

fn-nginx-path-vhosts-last-visited-at() {
  declare APP="$1"
  local LOG_PATH=$(fn-nginx-path-access-log-path "$APP")

  if [[ "$LOG_PATH" != "off" ]] && [[ "$LOG_PATH" != "/dev/null" ]] && [[ -f "$LOG_PATH" ]]; then
    stat -c %Y "$LOG_PATH"
  fi
}

fn-nginx-path-log-root() {
  declare desc="get the nginx log root"
  local NGINX_LOG_ROOT="/var/log/nginx"

  fn-nginx-path-vhosts-uses-openresty && NGINX_LOG_ROOT="/var/log/openresty"
  echo "$NGINX_LOG_ROOT"
}

# [BEGIN Sigils]
fn-nginx-path-sigil() {
  declare desc="get nginx config sigil path for different block types"
  declare TYPE="$1" SCOPE="$2" APP="$3" DOMAIN="${4:-}"
  local orig_property_name="nginx-conf-${TYPE}-sigil-path"
  local property_name="$orig_property_name"
  [[ -n "$DOMAIN" ]] && property_name="${property_name}-${DOMAIN}"
  
  case "$SCOPE" in
    computed)
      result=$(fn-get-property --computed --app "$APP" "$property_name")
      if [[ -z "$result" ]]; then
        result=$(fn-get-property --computed --app "$APP" "$orig_property_name") 
      fi
      ;;
  esac

  echo "$result"
}

# Location config
fn-nginx-path-computed_nginx-conf-location-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "location" "computed" "$APP" "$DOMAIN"
}

# Upstream config
fn-nginx-path-computed_nginx-conf-upstream-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "upstream" "computed" "$APP" "$DOMAIN"
}

# Server block config
fn-nginx-path-computed_nginx-conf-server-block-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "server-block" "computed" "$APP" "$DOMAIN"
}

# HTTP block config
fn-nginx-path-computed_nginx-conf-http-block-sigil-path() {
  local APP="$1"
  local DOMAIN="$2"
  fn-nginx-path-sigil "http-block" "computed" "$APP" "$DOMAIN"
}
# [END Sigils]

fn-nginx-path-vhosts-uses-openresty() {
  declare desc="returns whether openresty is in use or not"

  if [[ -x /usr/bin/openresty ]]; then
    return
  fi

  return 1
}

fn-nginx-path-vhosts-nginx-location() {
  declare desc="check that nginx is at the expected location and return it"
  local NGINX_LOCATION

  NGINX_LOCATION=$(command -v nginx 2>/dev/null)
  if [[ -z "$NGINX_LOCATION" ]]; then
    NGINX_LOCATION="/usr/sbin/nginx"
  fi

  if fn-nginx-path-vhosts-uses-openresty; then
    NGINX_LOCATION="/usr/bin/openresty"
  fi

  if [[ ! -x "$NGINX_LOCATION" ]]; then
    dokku_log_fail "Could not find nginx binary in \$PATH or at '${NGINX_LOCATION}'."
  fi

  echo "$NGINX_LOCATION"
}

fn-get-property() {
  declare desc="get a property from the nginx plugin"

  "$_DIR/nginx-property" --log-root "$(fn-nginx-path-log-root)"  "$@"
}

nginx_vhosts_validate_single_func() {
  declare APP="$1" FLAG="$2"
  local NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf"

  if [[ ! -f "$NGINX_CONF" ]]; then
    dokku_log_warn_quiet "No nginx config found for ${APP}"
    return
  fi

  if nginx_vhosts_is_valid_nginx_config_func "$APP"; then
    return
  fi

  dokku_log_warn "Failed to validate nginx config for ${APP}. Contents below..."
  cat "$NGINX_CONF"

  if [[ "$FLAG" == "--clean" ]]; then
    nginx_vhosts_conf_clean_func "$APP"
  fi
}

nginx_vhosts_is_valid_nginx_config_func() {
  declare desc="checks if an app has a valid nginx config"
  declare APP="$1" CONFIG_TYPE="$2"
  if [[ -z "$CONFIG_TYPE" ]]; then
    echo "CONFIG_TYPE (second argument) is required"
    return 1
  fi

  local VALIDATE_TEMPLATE="$_DIR/templates/validate.conf.sigil"
  local TMP_OUTPUT=$(mktemp "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
  trap "rm -rf '$TMP_OUTPUT' >/dev/null" RETURN INT TERM EXIT

  CUSTOM_VALIDATE_TEMPLATE="$(plugn trigger nginx-path-app-template-source "$APP" "validate-config")"
  if [[ -n "$CUSTOM_VALIDATE_TEMPLATE" ]]; then
    VALIDATE_TEMPLATE="$CUSTOM_VALIDATE_TEMPLATE"
  fi

  sigil -f "$VALIDATE_TEMPLATE" NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf" | cat -s >"$TMP_OUTPUT"
  sudo "$NGINX_LOCATION" -t -c "$TMP_OUTPUT" 2>/dev/null
}

nginx_vhosts_conf_clean_func() {
  declare APP="$1"
  local NGINX_CONF="$DOKKU_ROOT/$APP/nginx.conf"
  dokku_log_warn "Removing invalid nginx file"
  rm -f "$NGINX_CONF"
}

nginx_clear_config() {
  declare desc="Remove the nginx conf file"
  declare APP="$1"
  rm -f "$DOKKU_ROOT/$APP/nginx.conf"
  suppress_output fn-nginx-path-vhosts-nginx-path-init-cmd "reload"
}
