#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$_DIR/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/certs/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$_DIR/internal-functions"

get_nginx_location() {
  declare desc="check that nginx is at the expected location and return it"
  fn-nginx-path-vhosts-nginx-path-location
}

validate_nginx() {
  declare desc="validate entire nginx config"
  declare APP="${1:-}" FLAG="${2:-}"
  local NGINX_LOCATION EXIT_CODE
  NGINX_LOCATION=$(get_nginx_location)
  if [[ -z "$NGINX_LOCATION" ]]; then
    exit 1
  fi

  if [[ "$APP" == "--clean" ]]; then
    APP=""
    FLAG="--clean"
  fi

  set +e
  sudo "$NGINX_LOCATION" -t &>/dev/null
  EXIT_CODE=$?
  set -e
  if [[ "$EXIT_CODE" -eq "0" ]]; then
    return
  fi

  if [[ -n "$APP" ]]; then
    verify_app_name "$APP"
    nginx_vhosts_validate_single_func "$APP" "$FLAG"
  else
    for app in $(dokku_apps "false"); do
      nginx_vhosts_validate_single_func "$app" "$FLAG"
    done
  fi

  set +e
  sudo "$NGINX_LOCATION" -t &>/dev/null
  EXIT_CODE=$?
  set -e
  if [[ "$EXIT_CODE" -eq "0" ]]; then
    return
  fi

  sudo "$NGINX_LOCATION" -t
  exit $?
}

restart_nginx() {
  declare desc="restart nginx for given distros"
  local PROXY_ENABLED="$(plugn trigger proxy-is-enabled "$APP")"
  local PROXY_TYPE="$(plugn trigger proxy-type "$APP")"
  if [[ "$PROXY_ENABLED" == "true" ]] && [[ "$PROXY_TYPE" == "$PROXY_NAME" ]]; then
    fn-nginx-path-vhosts-nginx-path-init-cmd "reload"
  fi
}

nginx_logs() {
  declare desc="display app nginx logs"
  declare NGINX_LOGS_TYPE="${1#nginx-path:}" APP="$2"
  local proxy_type

  local NGINX_LOGS_TYPE=${NGINX_LOGS_TYPE%-logs}
  local NGINX_LOGS_PATH="$("fn-nginx-path-computed-${NGINX_LOGS_TYPE}-log-path" "$APP")"

  if [[ "$NGINX_LOGS_PATH" == "off" ]] || [[ "$NGINX_LOGS_PATH" == "/dev/null" ]]; then
    dokku_log_fail "$NGINX_LOGS_TYPE logs are disabled for this app"
  fi

  proxy_type="$(plugn trigger proxy-type "$APP")"

  local tail=false
  local num=0
  if [[ $3 == "-t" ]]; then
    tail=true
  else
    num=20
  fi

  local DOKKU_SCHEDULER=$(get_app_scheduler "$APP")
  if [[ "$DOKKU_SCHEDULER" != "docker-local" ]] && [[ "$DOKKU_SCHEDULER" != "null" ]]; then
    plugn trigger scheduler-proxy-logs "$DOKKU_SCHEDULER" "$APP" "$proxy_type" "$NGINX_LOGS_TYPE" "$tail" "$num"
    return $?
  fi

  if [[ "$tail" == "true" ]]; then
    local NGINX_LOGS_ARGS="-F"
  else
    local NGINX_LOGS_ARGS="-n $num"
  fi

  tail "$NGINX_LOGS_ARGS" "$NGINX_LOGS_PATH"
}

validate_ssl_domains() {
  declare desc="check configured domains against SSL cert contents and show warning if mismatched"
  local APP=$1
  local VHOST_PATH="$DOKKU_ROOT/$APP/VHOST"
  local SSL_HOSTNAME=$(get_ssl_hostnames "$APP")
  local SSL_HOSTNAME_REGEX=$(echo "$SSL_HOSTNAME" | xargs | sed 's|\.|\\.|g' | sed 's/\*/\[^\.\]\*/g' | sed 's/ /|/g')

  if ! (grep -q -E "^${SSL_HOSTNAME_REGEX}$" "$VHOST_PATH" &>/dev/null); then
    dokku_log_info1 "No matching configured domains for $APP found in SSL certificate. Your app will show as insecure in a browser if accessed via SSL"
    dokku_log_info1 "Please add appropriate domains via the dokku domains command"
    [[ -n "$NONSSL_VHOSTS" ]] && dokku_log_info1 "Configured domains for app:"
    local domain
    for domain in $(echo "$NONSSL_VHOSTS" | xargs); do
      dokku_log_info2 "$domain"
    done
    [[ -n "$SSL_HOSTNAME" ]] && dokku_log_info1 "Domains found in SSL certificate:"
    for domain in $(echo "$SSL_HOSTNAME" | xargs); do
      dokku_log_info2 "$domain"
    done
  fi
}

get_custom_nginx_template() {
  declare desc="attempts to copy custom nginx template from app image"
  local APP="$1"
  local DESTINATION_FILE="$2"
  local IMAGE_TAG="$(get_running_image_tag "$APP")"
  local IMAGE=$(get_deploying_app_image_name "$APP" "$IMAGE_TAG")
  local NGINX_TEMPLATE_NAME="nginx.conf.sigil"
  local DISABLE_CUSTOM_CONFIG="$(fn-nginx-path-computed-disable-custom-config "$APP")"

  if [[ "$DISABLE_CUSTOM_CONFIG" == "true" ]]; then
    return
  fi

  if [[ -f "${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil.$DOKKU_PID.missing" ]]; then
    return
  fi

  if [[ -f "${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil.$DOKKU_PID" ]]; then
    cp "${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil.$DOKKU_PID" "$DESTINATION_FILE"
  elif [[ -f "${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil" ]]; then
    cp "${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil" "$DESTINATION_FILE"
  fi
}

is_tls13_available() {
  declare desc="detects whether the installed nginx version has TLSv1.3 support"
  local NGINX_VERSION="$1"
  local MAJOR_VERSION MINOR_VERSION PATCH_VERSION
  local HAS_SUPPORT=false

  MAJOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[1]}')
  MINOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[2]}')
  PATCH_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[3]}')
  if [[ "$MAJOR_VERSION" -ge "2" ]]; then
    HAS_SUPPORT=true
  elif [[ "$MAJOR_VERSION" -eq "1" ]] && [[ "$MINOR_VERSION" -ge "13" ]]; then
    HAS_SUPPORT=true
  fi

  echo $HAS_SUPPORT
}

is_http2_push_enabled() {
  declare desc="detects whether the installed nginx version has http2 push support"
  local NGINX_VERSION="$1"
  local MAJOR_VERSION MINOR_VERSION PATCH_VERSION
  local HAS_SUPPORT=false

  MAJOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[1]}')
  MINOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[2]}')
  PATCH_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[3]}')
  if [[ "$MAJOR_VERSION" -ge "2" ]]; then
    HAS_SUPPORT=true
  elif [[ "$MAJOR_VERSION" -eq "1" ]]; then
    if [[ "$MINOR_VERSION" -eq "13" ]] && [[ "$PATCH_VERSION" -ge "9" ]]; then
      HAS_SUPPORT=true
    elif [[ "$MINOR_VERSION" -ge "14" ]]; then
      HAS_SUPPORT=true
    fi
  fi

  echo $HAS_SUPPORT
}

is_http2_enabled() {
  declare desc="detects whether the installed nginx version has http2 support"
  local NGINX_VERSION="$1"
  local MAJOR_VERSION MINOR_VERSION PATCH_VERSION
  local HAS_SUPPORT=false

  MAJOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[1]}')
  MINOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[2]}')
  PATCH_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[3]}')
  if [[ "$MAJOR_VERSION" -ge "2" ]]; then
    HAS_SUPPORT=true
  elif [[ "$MAJOR_VERSION" -eq "1" ]]; then
    if [[ "$MINOR_VERSION" -eq "11" ]] && [[ "$PATCH_VERSION" -ge "5" ]]; then
      HAS_SUPPORT=true
    elif [[ "$MINOR_VERSION" -ge "12" ]]; then
      HAS_SUPPORT=true
    fi
  fi

  echo $HAS_SUPPORT
}

is_grpc_enabled() {
  declare desc="detects whether the installed nginx version has grpc support"
  local NGINX_VERSION="$1"
  local MAJOR_VERSION MINOR_VERSION PATCH_VERSION
  local HAS_SUPPORT=false

  MAJOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[1]}')
  MINOR_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[2]}')
  PATCH_VERSION=$(echo "$NGINX_VERSION" | awk '{split($0,a,"."); print a[3]}')
  if [[ "$MAJOR_VERSION" -ge "2" ]]; then
    HAS_SUPPORT=true
  elif [[ "$MAJOR_VERSION" -eq "1" ]]; then
    if [[ "$MINOR_VERSION" -eq "13" ]] && [[ "$PATCH_VERSION" -ge "10" ]]; then
      HAS_SUPPORT=true
    elif [[ "$MINOR_VERSION" -ge "14" ]]; then
      HAS_SUPPORT=true
    fi
  fi

  echo $HAS_SUPPORT
}

nginx_build_config() {
  declare desc="build nginx config to proxy app containers using sigil"
  declare APP="$1" DOKKU_APP_LISTEN_PORT="$2" DOKKU_APP_LISTEN_IP="$3"
  local APP_PATH="$(fn-nginx-path-computed-app-path "$APP")"
  local ROOT_DOMAIN="$(fn-nginx-path-computed-root-domain "$APP")"
  local DEFAULT_APP="$(fn-nginx-path-computed-default-app "$APP")"
  local VHOST_PATH="$DOKKU_ROOT/$APP/VHOST"
  local NGINX_TEMPLATE_NAME="nginx.conf.sigil"
  local NGINX_TEMPLATE="$_DIR/templates/$NGINX_TEMPLATE_NAME"
  local SCHEME=http
  local NGINX_TEMPLATE_SOURCE="built-in"
  local APP_SSL_PATH="$DOKKU_ROOT/$APP/tls"
  local DOKKU_APP_LISTENERS

  CUSTOM_NGINX_TEMPLATE="$(plugn trigger nginx-path-app-template-source "$APP" "app-config")"
  if [[ -n "$CUSTOM_NGINX_TEMPLATE" ]]; then
    local NGINX_TEMPLATE_SOURCE="plugin-supplied"
    NGINX_TEMPLATE="$CUSTOM_NGINX_TEMPLATE"
  fi

  local IS_APP_VHOST_ENABLED=true
  plugn trigger domains-vhost-enabled "$APP" 2>/dev/null || IS_APP_VHOST_ENABLED=false

  local IS_SSL_ENABLED=false
  if [[ "$(plugn trigger certs-exists "$APP")" == "true" ]]; then
    IS_SSL_ENABLED=true
  fi

  if [[ "$(plugn trigger proxy-is-enabled "$APP")" == "true" ]]; then
    if [[ -z "$DOKKU_APP_LISTEN_PORT" ]] && [[ -z "$DOKKU_APP_LISTEN_IP" ]]; then
      DOKKU_APP_LISTENERS="$(plugn trigger network-get-listeners "$APP" "web" | xargs)"
    elif [[ -n "$DOKKU_APP_LISTEN_PORT" ]] && [[ -n "$DOKKU_APP_LISTEN_IP" ]]; then
      local PASSED_LISTEN_IP_PORT=true
    fi

    # setup nginx listen ports
    plugn trigger ports-configure "$APP"
    local PROXY_PORT=$(config_get "$APP" DOKKU_PROXY_PORT)
    local PROXY_SSL_PORT=$(config_get "$APP" DOKKU_PROXY_SSL_PORT)

    local PORT_MAP PROXY_PORT_MAP proxy_port_map
    while read -r PORT_MAP; do
      local PROXY_UPSTREAM_SCHEME="$(awk -F ':' '{ print $1 }' <<<"$PORT_MAP")"
      if [[ "$PROXY_UPSTREAM_SCHEME" == "https" ]] && [[ "$IS_SSL_ENABLED" == "false" ]]; then
        dokku_log_warn "Ignoring detected https port mapping without an accompanying ssl certificate (${PORT_MAP})"
        continue
      fi

      proxy_port_map="$proxy_port_map $PORT_MAP"

      local PROXY_UPSTREAM_PORT="$(awk -F ':' '{ print $3 }' <<<"$PORT_MAP")"
      if [[ "$(is_val_in_list "$PROXY_UPSTREAM_PORT" "$PROXY_UPSTREAM_PORTS" " ")" == "false" ]]; then
        local PROXY_UPSTREAM_PORTS+="$PROXY_UPSTREAM_PORT "
      fi
    done < <(plugn trigger ports-get "$APP")
    PROXY_PORT_MAP="$(echo "$proxy_port_map" | xargs)" # trailing spaces mess up default template
    local PROXY_UPSTREAM_PORTS="$(echo "$PROXY_UPSTREAM_PORTS" | xargs)"

    local SSL_INUSE=
    local NONSSL_VHOSTS=$(plugn trigger domains-list "$APP")
    local NOSSL_SERVER_NAME=$(echo "$NONSSL_VHOSTS" | xargs)
    if [[ "$IS_SSL_ENABLED" == "true" ]]; then
      local SSL_INUSE=true
      local SCHEME=https
      validate_ssl_domains "$APP"
      local SSL_HOSTNAME=$(get_ssl_hostnames "$APP")
      local SSL_HOSTNAME_REGEX=$(echo "$SSL_HOSTNAME" | xargs | sed 's|\.|\\.|g' | sed 's/\*/\[^\.\]\*/g' | sed 's/ /|/g')

      if [[ "$IS_APP_VHOST_ENABLED" == "true" ]]; then
        local SSL_VHOSTS=$(grep -E "^${SSL_HOSTNAME_REGEX}$" "$VHOST_PATH" || true)
      else
        local SSL_VHOSTS=$(<"$DOKKU_ROOT/VHOST")
      fi
      local SSL_SERVER_NAME
      local host
      for host in $SSL_VHOSTS; do
        # SSL_SERVER_NAME should only contain items not in NOSSL_SERVER_NAME
        if [[ ! $NOSSL_SERVER_NAME =~ (^|[[:space:]])$host($|[[:space:]]) ]]; then
          SSL_SERVER_NAME="${host}${SSL_SERVER_NAME:+ $SSL_SERVER_NAME}"
        fi
      done
    fi

    local NGINX_LOCATION NGINX_VERSION SPDY_SUPPORTED TLS13_SUPPORTED HTTP2_SUPPORTED HTTP2_PUSH_SUPPORTED GRPC_SUPPORTED
    NGINX_LOCATION=$(get_nginx_location)
    if [[ -z "$NGINX_LOCATION" ]]; then
      exit 1
    fi
    NGINX_VERSION="$("$NGINX_LOCATION" -v 2>&1 | cut -d'/' -f 2)"
    # DEPRECATED: Remove me at 1.0.0
    SPDY_SUPPORTED="false"
    TLS13_SUPPORTED="$(is_tls13_available "$NGINX_VERSION")"
    HTTP2_SUPPORTED="$(is_http2_enabled "$NGINX_VERSION")"
    HTTP2_PUSH_SUPPORTED="$(is_http2_push_enabled "$NGINX_VERSION")"
    GRPC_SUPPORTED="$(is_grpc_enabled "$NGINX_VERSION")"

    local NGINX_LOG_ROOT="$(fn-nginx-path-log-root)"
    local NGINX_ACCESS_LOG_FORMAT="$(fn-nginx-path-computed-access-log-format "$APP")"
    local NGINX_ACCESS_LOG_PATH="$(fn-nginx-path-computed-access-log-path "$APP")"
    local NGINX_ERROR_LOG_PATH="$(fn-nginx-path-computed-error-log-path "$APP")"
    local CLIENT_BODY_TIMEOUT="$(fn-nginx-path-computed-client-body-timeout "$APP")"
    local CLIENT_HEADER_TIMEOUT="$(fn-nginx-path-computed-client-header-timeout "$APP")"
    local CLIENT_MAX_BODY_SIZE="$(fn-nginx-path-computed-client-max-body-size "$APP")"
    local KEEPALIVE_TIMEOUT="$(fn-nginx-path-computed-keepalive-timeout "$APP")"
    local LINGERING_TIMEOUT="$(fn-nginx-path-computed-lingering-timeout "$APP")"
    local PROXY_CONNECT_TIMEOUT="$(fn-nginx-path-computed-proxy-connect-timeout "$APP")"
    local PROXY_READ_TIMEOUT="$(fn-nginx-path-computed-proxy-read-timeout "$APP")"
    local PROXY_SEND_TIMEOUT="$(fn-nginx-path-computed-proxy-send-timeout "$APP")"
    local SEND_TIMEOUT="$(fn-nginx-path-computed-send-timeout "$APP")"
    local PROXY_BUFFER_SIZE="$(fn-nginx-path-computed-proxy-buffer-size "$APP")"
    local PROXY_BUFFERING="$(fn-nginx-path-computed-proxy-buffering "$APP")"
    local PROXY_BUFFERS="$(fn-nginx-path-computed-proxy-buffers "$APP")"
    local PROXY_BUSY_BUFFERS_SIZE="$(fn-nginx-path-computed-proxy-busy-buffers-size "$APP")"

    if [[ -z "$DOKKU_APP_LISTENERS" ]]; then
      dokku_log_warn_quiet "No web listeners specified for $APP"
    elif (is_deployed "$APP"); then
      if [[ "$(plugn trigger network-get-static-listeners "$APP" "web")" == "" ]]; then
        local IMAGE_TAG=$(get_running_image_tag "$APP")
        local IMAGE=$(get_deploying_app_image_name "$APP" "$IMAGE_TAG" 2>/dev/null)
        if ! verify_image "$IMAGE" 2>/dev/null; then
          dokku_log_fail "Missing image for app"
        fi
      fi

      local NGINX_BUILD_CONFIG_TMP_WORK_DIR=$(mktemp -d "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
      local NGINX_CONF=$(mktemp --tmpdir="${NGINX_BUILD_CONFIG_TMP_WORK_DIR}" "nginx.conf.XXXXXX")
      local CUSTOM_NGINX_TEMPLATE="$NGINX_BUILD_CONFIG_TMP_WORK_DIR/$NGINX_TEMPLATE_NAME"
      trap "rm -rf '$NGINX_CONF' '$NGINX_BUILD_CONFIG_TMP_WORK_DIR' >/dev/null" RETURN INT TERM EXIT

      get_custom_nginx_template "$APP" "$CUSTOM_NGINX_TEMPLATE" 2>/dev/null
      if [[ -f "$CUSTOM_NGINX_TEMPLATE" ]]; then
        dokku_log_info1 'Overriding default nginx.conf with detected nginx.conf.sigil'
        local NGINX_TEMPLATE="$CUSTOM_NGINX_TEMPLATE"
        local NGINX_TEMPLATE_SOURCE="app-supplied"
      fi

      local NGINX_BIND_ADDRESS_IP4="$(fn-nginx-path-computed-bind-address-ipv4 "$APP")"
      local NGINX_BIND_ADDRESS_IP6="$(fn-nginx-path-computed-bind-address-ipv6 "$APP")"
      local NGINX_UNDERSCORE_IN_HEADERS="$(fn-nginx-path-computed-underscore-in-headers "$APP")"
      local PROXY_X_FORWARDED_FOR="$(fn-nginx-path-computed-x-forwarded-for-value "$APP")"
      local PROXY_X_FORWARDED_PORT="$(fn-nginx-path-computed-x-forwarded-port-value "$APP")"
      local PROXY_X_FORWARDED_PROTO="$(fn-nginx-path-computed-x-forwarded-proto-value "$APP")"
      local PROXY_X_FORWARDED_SSL="$(fn-nginx-path-computed-x-forwarded-ssl "$APP")"

      local DOMAIN_CONFIG_EXISTS=false
      local PRIMARY_APP_FOR_DOMAIN=""

      for existing_app in $(dokku_apps); do
        if [[ "$existing_app" != "$APP" ]] && [[ -f "$DOKKU_ROOT/$existing_app/nginx.conf" ]]; then
        local existing_root_domain="$(fn-nginx-path-computed-root-domain "$existing_app")"
        if [[ "$existing_root_domain" == "$ROOT_DOMAIN" ]]; then
            DOMAIN_CONFIG_EXISTS=true
            PRIMARY_APP_FOR_DOMAIN="$existing_app"
            break
        fi
        fi
      done

      local ALL_APPS_FOR_DOMAIN=""
      local STRIP_PATH="$(fn-nginx-path-computed-strip-path "$APP")"

      for check_app in $(dokku_apps); do
        local check_root_domain="$(fn-nginx-path-computed-root-domain "$check_app")"
        if [[ "$check_root_domain" == "$ROOT_DOMAIN" ]] && [[ "$(plugn trigger proxy-is-enabled "$check_app")" == "true" ]]; then
        ALL_APPS_FOR_DOMAIN="$ALL_APPS_FOR_DOMAIN $check_app"
        fi
      done
      ALL_APPS_FOR_DOMAIN="$(echo "$ALL_APPS_FOR_DOMAIN" | xargs)"

      eval "$(config_export app "$APP")"

      local SIGIL_PARAMS=(-f "$NGINX_TEMPLATE" APP="$APP" DOKKU_ROOT="$DOKKU_ROOT"
        NOSSL_SERVER_NAME="$NOSSL_SERVER_NAME"
        # Deprecated: Remove this after a few versions
        DOKKU_APP_LISTENERS="$DOKKU_APP_LISTENERS"
        DOKKU_LIB_ROOT="$DOKKU_LIB_ROOT"
        PASSED_LISTEN_IP_PORT="$PASSED_LISTEN_IP_PORT"
        SPDY_SUPPORTED="$SPDY_SUPPORTED"
        TLS13_SUPPORTED="$TLS13_SUPPORTED"
        HTTP2_SUPPORTED="$HTTP2_SUPPORTED"
        NGINX_LOG_ROOT="$NGINX_LOG_ROOT"
        NGINX_ACCESS_LOG_FORMAT="$NGINX_ACCESS_LOG_FORMAT"
        NGINX_ACCESS_LOG_PATH="$NGINX_ACCESS_LOG_PATH"
        NGINX_ERROR_LOG_PATH="$NGINX_ERROR_LOG_PATH"
        NGINX_BIND_ADDRESS_IP4="$NGINX_BIND_ADDRESS_IP4"
        NGINX_BIND_ADDRESS_IP6="$NGINX_BIND_ADDRESS_IP6"
        HTTP2_PUSH_SUPPORTED="$HTTP2_PUSH_SUPPORTED"
        GRPC_SUPPORTED="$GRPC_SUPPORTED"
        DOKKU_APP_LISTEN_PORT="$DOKKU_APP_LISTEN_PORT" DOKKU_APP_LISTEN_IP="$DOKKU_APP_LISTEN_IP"
        APP_SSL_PATH="$APP_SSL_PATH" SSL_INUSE="$SSL_INUSE" SSL_SERVER_NAME="$SSL_SERVER_NAME"
        CLIENT_BODY_TIMEOUT="$CLIENT_BODY_TIMEOUT"
        CLIENT_HEADER_TIMEOUT="$CLIENT_HEADER_TIMEOUT"
        CLIENT_MAX_BODY_SIZE="$CLIENT_MAX_BODY_SIZE"
        KEEPALIVE_TIMEOUT="$KEEPALIVE_TIMEOUT"
        LINGERING_TIMEOUT="$LINGERING_TIMEOUT"
        PROXY_CONNECT_TIMEOUT="$PROXY_CONNECT_TIMEOUT"
        PROXY_READ_TIMEOUT="$PROXY_READ_TIMEOUT"
        PROXY_SEND_TIMEOUT="$PROXY_SEND_TIMEOUT"
        SEND_TIMEOUT="$SEND_TIMEOUT"
        PROXY_BUFFER_SIZE="$PROXY_BUFFER_SIZE"
        PROXY_BUFFERING="$PROXY_BUFFERING"
        PROXY_BUFFERS="$PROXY_BUFFERS"
        PROXY_BUSY_BUFFERS_SIZE="$PROXY_BUSY_BUFFERS_SIZE"
        NGINX_UNDERSCORE_IN_HEADERS="$NGINX_UNDERSCORE_IN_HEADERS"
        # Deprecated: Remove this after a few versions
        NGINX_PORT="$PROXY_PORT" NGINX_SSL_PORT="$PROXY_SSL_PORT"
        PROXY_PORT="$PROXY_PORT" PROXY_SSL_PORT="$PROXY_SSL_PORT"
        PROXY_PORT_MAP="$PROXY_PORT_MAP" PROXY_UPSTREAM_PORTS="$PROXY_UPSTREAM_PORTS"
        PROXY_X_FORWARDED_FOR="$PROXY_X_FORWARDED_FOR"
        PROXY_X_FORWARDED_PORT="$PROXY_X_FORWARDED_PORT"
        PROXY_X_FORWARDED_PROTO="$PROXY_X_FORWARDED_PROTO"
        PROXY_X_FORWARDED_SSL="$PROXY_X_FORWARDED_SSL"

        APP_PATH="$APP_PATH"
        ROOT_DOMAIN="$ROOT_DOMAIN"
        DEFAULT_APP="$DEFAULT_APP")

        ALL_APPS_FOR_DOMAIN="$ALL_APPS_FOR_DOMAIN"
        DOMAIN_CONFIG_EXISTS="$DOMAIN_CONFIG_EXISTS"
        PRIMARY_APP_FOR_DOMAIN="$PRIMARY_APP_FOR_DOMAIN"

      while read -r line || [[ -n "$line" ]]; do
        PROC_TYPE=${line%%=*}
        LISTENERS="$(plugn trigger network-get-listeners "$APP" "$PROC_TYPE" | xargs)"
        UPP_PROC_TYPE="${PROC_TYPE^^}"
        UPP_PROC_TYPE="${UPP_PROC_TYPE//-/_}"
        SIGIL_PARAMS+=("DOKKU_APP_${UPP_PROC_TYPE}_LISTENERS=$LISTENERS")
      done < <(plugn trigger ps-current-scale "$APP")

      if grep DOKKU_APP_LISTENERS "$NGINX_TEMPLATE"; then
        dokku_log_warn "Deprecated: Usage of DOKKU_APP_LISTENERS within nginx.conf.sigil templates is deprecated in favor of DOKKU_APP_WEB_LISTENERS"
      fi

      if grep NGINX_SSL_PORT "$NGINX_TEMPLATE"; then
        dokku_log_warn "Deprecated: Usage of NGINX_SSL_PORT within nginx.conf.sigil templates is deprecated in favor of PROXY_SSL_PORT"
      fi

      if grep NGINX_PORT "$NGINX_TEMPLATE"; then
        dokku_log_warn "Deprecated: Usage of NGINX_PORT within nginx.conf.sigil templates is deprecated in favor of PROXY_PORT"
      fi

      if [[ "$DOMAIN_CONFIG_EXISTS" == "true" ]]; then
        dokku_log_info2 "Domain $ROOT_DOMAIN already configured by $PRIMARY_APP_FOR_DOMAIN, merging configuration..."

        local APP_LOCATION_CONFIG=$(mktemp --tmpdir="${NGINX_BUILD_CONFIG_TMP_WORK_DIR}" "location-${APP}.conf.XXXXXX")
        generate_location_config_for_app "$APP" "$APP_PATH" "$PROXY_UPSTREAM_PORTS" "$NGINX_BUILD_CONFIG_TMP_WORK_DIR" > "$APP_LOCATION_CONFIG"

        mkdir -p "$DOKKU_ROOT/$PRIMARY_APP_FOR_DOMAIN/nginx.conf.d"
        cp "$APP_LOCATION_CONFIG" "$DOKKU_ROOT/$PRIMARY_APP_FOR_DOMAIN/nginx.conf.d/location-${APP}.conf"

        # nginx_build_config "$PRIMARY_APP_FOR_DOMAIN"

        return 0
      else
        dokku_log_info1 "Creating primary configuration for domain $ROOT_DOMAIN"

        for other_app in $ALL_APPS_FOR_DOMAIN; do
        if [[ "$other_app" != "$APP" ]]; then
            local other_app_path="$(fn-nginx-path-computed-app-path "$other_app")"
            local other_upstream_ports=""

            while read -r PORT_MAP; do
            local other_upstream_port="$(awk -F ':' '{ print $3 }' <<<"$PORT_MAP")"
            other_upstream_ports="$other_upstream_ports $other_upstream_port"
            done < <(plugn trigger ports-get "$other_app")
            other_upstream_ports="$(echo "$other_upstream_ports" | xargs)"

            mkdir -p "$DOKKU_ROOT/$APP/nginx.conf.d"
            generate_location_config_for_app "$other_app" "$other_app_path" "$other_upstream_ports" "$NGINX_BUILD_CONFIG_TMP_WORK_DIR" > "$DOKKU_ROOT/$APP/nginx.conf.d/location-${other_app}.conf"
            generate_upstream_config_for_app "$other_app" "$other_upstream_ports" > "$DOKKU_ROOT/$APP/nginx.conf.d/upstream-${other_app}.conf"
        fi
        done
      fi

      # execute sigil template processing
      xargs -i echo "-----> Configuring {}...(using $NGINX_TEMPLATE_SOURCE template)" <<<"$(echo "${SSL_VHOSTS}" "${NONSSL_VHOSTS}" | tr ' ' '\n' | sort -u)"
      sigil "${SIGIL_PARAMS[@]}" | cat -s >"$NGINX_CONF"

      dokku_log_info1 "Creating $SCHEME nginx.conf"
      mv "$NGINX_CONF" "$DOKKU_ROOT/$APP/nginx.conf"

      fn-nginx-path-vhosts-manage-hsts "$APP" "$SSL_INUSE"

      plugn trigger nginx-path-pre-reload "$APP" "$DOKKU_APP_LISTEN_PORT" "$DOKKU_APP_LISTEN_IP"

      dokku_log_verbose "Reloading nginx-path"
      validate_nginx && restart_nginx >/dev/null
    fi
  else
    # note because this clause is long. if the proxy is disabled:
    dokku_log_info1 "Nginx support is disabled for app ($APP)"
    if [[ -f "$DOKKU_ROOT/$APP/nginx.conf" ]]; then
      dokku_log_info1 "Deleting nginx.conf"
      rm "$DOKKU_ROOT/$APP/nginx.conf"

      if (is_deployed "$APP"); then
        dokku_log_info1 "Reloading nginx after nginx.conf deletion"
        validate_nginx && restart_nginx >/dev/null
      fi
    fi
  fi
}

generate_location_config_for_app() {
  local app="$1"
  local app_path="$2"
  local upstream_ports="$3"
  local work_dir="$4"

  local strip_path="$(fn-nginx-path-computed-strip-path "$app")"
  local proxy_connect_timeout="$(fn-nginx-path-computed-proxy-connect-timeout "$app")"
  local proxy_read_timeout="$(fn-nginx-path-computed-proxy-read-timeout "$app")"
  local proxy_send_timeout="$(fn-nginx-path-computed-proxy-send-timeout "$app")"
  local proxy_buffer_size="$(fn-nginx-path-computed-proxy-buffer-size "$app")"
  local proxy_buffering="$(fn-nginx-path-computed-proxy-buffering "$app")"
  local proxy_buffers="$(fn-nginx-path-computed-proxy-buffers "$app")"
  local proxy_busy_buffers_size="$(fn-nginx-path-computed-proxy-busy-buffers-size "$app")"
  local proxy_x_forwarded_for="$(fn-nginx-path-computed-x-forwarded-for-value "$app")"
  local proxy_x_forwarded_port="$(fn-nginx-path-computed-x-forwarded-port-value "$app")"
  local proxy_x_forwarded_proto="$(fn-nginx-path-computed-x-forwarded-proto-value "$app")"
  local proxy_x_forwarded_ssl="$(fn-nginx-path-computed-x-forwarded-ssl "$app")"

  for upstream_port in $upstream_ports; do
    cat <<EOF
# Location block for app: $app
location /${app_path}/ {
$(if [[ "$strip_path" == "true" ]]; then
cat <<EOL
    rewrite "^/${app_path}/(.*)" "/\$1" break;
    proxy_pass http://${app}-${upstream_port}/;
EOL
else
cat <<EOL
    # Keep the original path
    proxy_pass http://${app}-${upstream_port}/;
EOL
fi)

    gzip on;
    gzip_min_length  1100;
    gzip_buffers  4 32k;
    gzip_types    text/css text/javascript text/xml text/plain text/x-component application/javascript application/x-javascript application/wasm application/json application/xml application/rss+xml font/truetype application/x-font-ttf font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_vary on;
    gzip_comp_level  6;

    proxy_http_version 1.1;
$(if [[ -n "$proxy_connect_timeout" ]]; then echo "    proxy_connect_timeout $proxy_connect_timeout;"; fi)
$(if [[ -n "$proxy_read_timeout" ]]; then echo "    proxy_read_timeout $proxy_read_timeout;"; fi)
$(if [[ -n "$proxy_send_timeout" ]]; then echo "    proxy_send_timeout $proxy_send_timeout;"; fi)
    proxy_buffer_size $proxy_buffer_size;
    proxy_buffering $proxy_buffering;
    proxy_buffers $proxy_buffers;
    proxy_busy_buffers_size $proxy_busy_buffers_size;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection \$http_connection;
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-For $proxy_x_forwarded_for;
    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Request-Start \$msec;
    proxy_set_header X-Forwarded-Host \$host;

    proxy_set_header X-Forwarded-Prefix /${app_path}/;
    proxy_set_header X-Script-Name /${app_path};
$(if [[ -n "$proxy_x_forwarded_ssl" ]]; then echo "    proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;"; fi)
}

# Redirect from /${app_path} to /${app_path}/
location = /${app_path} {
    return 301 \$scheme://\$host/${app_path}/;
}

EOF
  done
}

fn-nginx-path-computed-strip-path() {
  declare desc="get the computed strip-path value"
  declare APP="$1"

  local strip_path=$(fn-get-property --app "$APP" --computed "strip-path")
  if [[ -z "$strip_path" ]]; then
    echo "false"
  else
    echo "$strip_path"
  fi
}

generate_upstream_config_for_app() {
  local app="$1"
  local upstream_ports="$2"

  for upstream_port in $upstream_ports; do
    cat <<EOF
# Upstream for app: $app
upstream ${app}-${upstream_port} {
$(plugn trigger network-get-listeners "$app" "web" |
  while read -r listener; do
    local listener_ip=${listener%%:*}
    echo "  server ${listener_ip}:${upstream_port};"
  done)
}
EOF
  done
}
