#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$_DIR/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/certs/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$_DIR/internal-functions"

get_nginx_location() {
  declare desc="check that nginx is at the expected location and return it"
  fn-nginx-custom-nginx-custom-location
}

get_app_proxy_type() {
  local APP="$1"
  plugn trigger proxy-type "$APP"
}

validate_nginx() {
  declare desc="validate entire nginx config"
  declare APP="${1:-}" FLAG="${2:-}"
  local NGINX_LOCATION EXIT_CODE
  NGINX_LOCATION=$(get_nginx_location)
  if [[ -z "$NGINX_LOCATION" ]]; then
    exit 1
  fi

  if [[ "$APP" == "--clean" ]]; then
    APP=""
    FLAG="--clean"
  fi

  set +e
  sudo "$NGINX_LOCATION" -t &>/dev/null
  EXIT_CODE=$?
  set -e
  if [[ "$EXIT_CODE" -eq "0" ]]; then
    return
  fi

  if [[ -n "$APP" ]]; then
    verify_app_name "$APP"
    nginx_vhosts_validate_single_func "$APP" "$FLAG"
  else
    for app in $(dokku_apps "false"); do
      nginx_vhosts_validate_single_func "$app" "$FLAG"
    done
  fi

  set +e
  sudo "$NGINX_LOCATION" -t &>/dev/null
  EXIT_CODE=$?
  set -e
  if [[ "$EXIT_CODE" -eq "0" ]]; then
    return
  fi

  sudo "$NGINX_LOCATION" -t
  exit $?
}

restart_nginx() {
  declare desc="restart nginx for given distros"
  local PROXY_ENABLED="$(plugn trigger proxy-is-enabled "$APP")"
  local PROXY_TYPE="$(plugn trigger proxy-type "$APP")"
  if [[ "$PROXY_ENABLED" == "true" ]] && [[ "$PROXY_TYPE" == "$PROXY_NAME" ]]; then
    fn-nginx-custom-nginx-custom-init-cmd "reload"
  fi
}

nginx_logs() {
  declare desc="display app nginx logs"
  declare CMD="$1" APP="$2"
  local log_type

  if [[ "$CMD" == *"access-logs"* ]]; then
    log_type="access"
  elif [[ "$CMD" == *"error-logs"* ]]; then
    log_type="error"
  else
    dokku_log_fail "Unknown log type from command: $CMD"
    return 1
  fi

  local NGINX_LOGS_PATH
  NGINX_LOGS_PATH=$(fn-nginx-custom-computed-${log_type}-log-path "$APP")

  if [[ "$NGINX_LOGS_PATH" == "off" ]] || [[ "$NGINX_LOGS_PATH" == "/dev/null" ]] || [[ -z "$NGINX_LOGS_PATH" ]]; then
    dokku_log_fail "${log_type} logs are disabled or path not found for this app"
    return 1
  fi

  local tail=false
  local num=20
  if [[ $3 == "-t" ]]; then
    tail=true
  fi

  local DOKKU_SCHEDULER
  DOKKU_SCHEDULER=$(get_app_scheduler "$APP")
  if [[ "$DOKKU_SCHEDULER" != "docker-local" ]] && [[ "$DOKKU_SCHEDULER" != "null" ]]; then
    plugn trigger scheduler-proxy-logs "$DOKKU_SCHEDULER" "$APP" "$PROXY_NAME" "$log_type" "$tail" "$num"
    return $?
  fi

  if [[ "$tail" == "true" ]]; then
    tail -F "$NGINX_LOGS_PATH"
  else
    tail -n "$num" "$NGINX_LOGS_PATH"
  fi
}

validate_ssl_domains() {
  declare desc="check configured domains against SSL cert contents and show warning if mismatched"
  local APP=$1
  local VHOST_PATH="$DOKKU_ROOT/$APP/VHOST"
  local SSL_HOSTNAME=$(get_ssl_hostnames "$APP")
  local SSL_HOSTNAME_REGEX=$(echo "$SSL_HOSTNAME" | xargs | sed 's|\.|\\.|g' | sed 's/\*/\[^\.\]\*/g' | sed 's/ /|/g')

  if ! (grep -q -E "^${SSL_HOSTNAME_REGEX}$" "$VHOST_PATH" &>/dev/null); then
    dokku_log_info1 "No matching configured domains for $APP found in SSL certificate. Your app will show as insecure in a browser if accessed via SSL"
    dokku_log_info1 "Please add appropriate domains via the dokku domains command"
    [[ -n "$NONSSL_VHOSTS" ]] && dokku_log_info1 "Configured domains for app:"
    local domain
    for domain in $(echo "$NONSSL_VHOSTS" | xargs); do
      dokku_log_info2 "$domain"
    done
    [[ -n "$SSL_HOSTNAME" ]] && dokku_log_info1 "Domains found in SSL certificate:"
    for domain in $(echo "$SSL_HOSTNAME" | xargs); do
      dokku_log_info2 "$domain"
    done
  fi
}

get_custom_nginx_template() {
  declare desc="attempts to copy custom nginx template from app image"
  local APP="$1"
  local DESTINATION_FILE="$2"
  local DISABLE_CUSTOM_CONFIG
  DISABLE_CUSTOM_CONFIG="$(fn-nginx-custom-computed-disable-custom-config "$APP")"

  if [[ "$DISABLE_CUSTOM_CONFIG" == "true" ]]; then
    return 1
  fi

  local custom_template_with_pid="${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil.$DOKKU_PID"
  local custom_template_generic="${DOKKU_LIB_ROOT}/data/$PROXY_NAME/app-$APP/nginx.conf.sigil"

  if [[ -f "$custom_template_with_pid" ]]; then
    cp "$custom_template_with_pid" "$DESTINATION_FILE"
    return 0
  elif [[ -f "$custom_template_generic" ]]; then
    cp "$custom_template_generic" "$DESTINATION_FILE"
    return 0
  fi

  return 1
}

nginx_build_config() {
  declare desc="build nginx config to proxy app containers using sigil"
  declare APP="$1"

  DOKKU_APP_LISTENERS="$(plugn trigger network-get-listeners "$APP" "web" | xargs)"

  echo -e "DOKKU_APP_LISTENERS: $DOKKU_APP_LISTENERS"

  plugn trigger ports-configure "$APP"
  local PROXY_PORT=$(config_get "$APP" DOKKU_PROXY_PORT)
  local PROXY_SSL_PORT=$(config_get "$APP" DOKKU_PROXY_SSL_PORT)
  echo -e "PROXY_PORT: $PROXY_PORT"
  echo -e "PROXY_SSL_PORT: $PROXY_SSL_PORT"

  local PORT_MAP PROXY_PORT_MAP proxy_port_map
  while read -r PORT_MAP; do
    echo -e "PORT_MAP: $PORT_MAP"

    local PROXY_UPSTREAM_SCHEME="$(awk -F ':' '{ print $1 }' <<<"$PORT_MAP")"

    proxy_port_map="$proxy_port_map $PORT_MAP"

    local PROXY_UPSTREAM_PORT="$(awk -F ':' '{ print $3 }' <<<"$PORT_MAP")"
    if [[ "$(is_val_in_list "$PROXY_UPSTREAM_PORT" "$PROXY_UPSTREAM_PORTS" " ")" == "false" ]]; then
      local PROXY_UPSTREAM_PORTS+="$PROXY_UPSTREAM_PORT "
    fi
  done < <(plugn trigger ports-get "$APP")
  
  PROXY_PORT_MAP="$(echo "$proxy_port_map" | xargs)"

  local PROXY_UPSTREAM_PORTS="$(echo "$PROXY_UPSTREAM_PORTS" | xargs)"

  export DOKKU_APP_LISTENERS PROXY_PORT PROXY_PORT_MAP PROXY_UPSTREAM_PORTS
  "$_DIR/nginx-config-builder" \
    -app-name "$APP" \
    -config-file-path "$(fn-nginx-custom-config-file "$APP")"
}